
suitpajamas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000014  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000123  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c6  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000139  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    000000cb  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  c6:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <adc_init>:
#include <avr/io.h>
#include <util/delay.h>

void adc_init(){
	// Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	86 b9       	out	0x06, r24	; 6
	// Set ADC reference to AVCC and left adjust for easy reading 
	ADMUX |= (1 << REFS0) | (1<<ADLAR);
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	80 66       	ori	r24, 0x60	; 96
  d8:	87 b9       	out	0x07, r24	; 7
	// Set ADC to fre running mode and enable
	ADCSRA |= (1 << ADFR) | (1 << ADEN);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 6a       	ori	r24, 0xA0	; 160
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <main>:
}

int main()
{
  e2:	cf ef       	ldi	r28, 0xFF	; 255
  e4:	d0 e1       	ldi	r29, 0x10	; 16
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	cd bf       	out	0x3d, r28	; 61
DDRB = 0xFF;	//set port B (LED lights) to all outputs
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 bb       	out	0x17, r24	; 23
DDRF = 0x00;	//set port F (prox sensor) to inputs
  ee:	10 92 61 00 	sts	0x0061, r1
PORTB = 0x00;	//Deavtivate pullup resistor on this input so it'll default low.
  f2:	18 ba       	out	0x18, r1	; 24

adc_init();
  f4:	0e 94 67 00 	call	0xce	; 0xce <adc_init>
ADCSRA |= (1 << ADSC);  // Start A2D Conversions
  f8:	36 9a       	sbi	0x06, 6	; 6
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	c0 e4       	ldi	r28, 0x40	; 64
 100:	df e1       	ldi	r29, 0x1F	; 31
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f0 e0       	ldi	r31, 0x00	; 0

uint16_t dist = 0; 

while(1){	   //do forever
	dist = ADCH;
 106:	85 b1       	in	r24, 0x05	; 5

	PORTB = 1 << (dist / (255 / 8));
 108:	99 27       	eor	r25, r25
 10a:	6f e1       	ldi	r22, 0x1F	; 31
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 94 00 	call	0x128	; 0x128 <__udivmodhi4>
 112:	a9 01       	movw	r20, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x38>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x34>
 11e:	48 bb       	out	0x18, r20	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 120:	ce 01       	movw	r24, r28
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x40>
 126:	ef cf       	rjmp	.-34     	; 0x106 <main+0x24>

00000128 <__udivmodhi4>:
 128:	aa 1b       	sub	r26, r26
 12a:	bb 1b       	sub	r27, r27
 12c:	51 e1       	ldi	r21, 0x11	; 17
 12e:	07 c0       	rjmp	.+14     	; 0x13e <__udivmodhi4_ep>

00000130 <__udivmodhi4_loop>:
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a6 17       	cp	r26, r22
 136:	b7 07       	cpc	r27, r23
 138:	10 f0       	brcs	.+4      	; 0x13e <__udivmodhi4_ep>
 13a:	a6 1b       	sub	r26, r22
 13c:	b7 0b       	sbc	r27, r23

0000013e <__udivmodhi4_ep>:
 13e:	88 1f       	adc	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	5a 95       	dec	r21
 144:	a9 f7       	brne	.-22     	; 0x130 <__udivmodhi4_loop>
 146:	80 95       	com	r24
 148:	90 95       	com	r25
 14a:	bc 01       	movw	r22, r24
 14c:	cd 01       	movw	r24, r26
 14e:	08 95       	ret

00000150 <_exit>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <_exit>
